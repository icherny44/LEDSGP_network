visLegend(addNodes = lnodes,
useGroups = F,
width = .2)
LEDS_GP_network
edges <- read.csv("edges.csv", stringsAsFactors = F)
nodes <- read.csv("nodes.csv", stringsAsFactors = F)
nodes <- nodes[nodes$id %in% edges$Var1 | nodes$id %in% edges$Var2, ]
c("green","tomato","purple")[as.factor(nodes$Type)
c("green","tomato","purple")[nodes$Type]
c("green","tomato","purple")[nodes$TypeID]
c(15,30,45)[nodes$TypeID]
library(visNetwork)
edges <- read.csv("edges.csv", stringsAsFactors = F)
nodes <- read.csv("nodes.csv", stringsAsFactors = F)
# set up the nodes data.frame with node attributes
visnodes <- data.frame(id = nodes$id,
Name = nodes$Name,
label = nodes$Name,
font = list(size = 18,
color = "black"),
group = nodes$Type,
size = c(15,30,45)[nodes$TypeID],
shape = "dot",
color = c("green","tomato","purple")[nodes$TypeID],
title = paste0(nodes$Description))
# set up the edges data.frame with edge attributes
names(edges) <- c("from","to","Value","Description","Status")
visedges <- data.frame(from = edges$from, to = edges$to,
title = paste0(edges$Description),
width = 2,
smooth = TRUE)
# remove nodes with no connections
visnodes <- visnodes[nodes$id %in% edges$from | nodes$id %in% edges$to, ]
# nodes for legend
lnodes <- data.frame(id = 1:3,
label = c("Country", "Working Group","Regional Platform"),
shape = c( "dot"), color = c("green","tomato","purple"),
size = 10,
stringsAsFactors = F)
# plot the thing
LEDS_GP_network <- visNetwork(visnodes,visedges,width = "1200px", height = "600px",
main = "LEDS GP Activities") %>%
visPhysics(enabled = TRUE,
barnesHut = list(avoidOverlap = .2)) %>%
visInteraction(keyboard = TRUE, tooltipDelay = 0) %>%
visOptions(selectedBy = list(variable = "group",
#  selected = "Country",
style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: black;
border: none;
outline: none;')) %>%
visLegend(addNodes = lnodes,
useGroups = F,
width = .2)
visSave(LEDS_GP_network, file = "LEDS_GP_network.html", selfcontained = FALSE)
LEDS_GP_network
lnodes
LEDS_GP_network
LEDS_GP_network <- visNetwork(visnodes,visedges,width = "1200px", height = "600px",
main = "LEDS GP Activities") %>%
visPhysics(enabled = TRUE,
barnesHut = list(avoidOverlap = .2)) %>%
visInteraction(keyboard = TRUE, tooltipDelay = 0) %>%
visOptions(selectedBy = list(variable = "group",
#  selected = "Country",
style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: black;
border: none;
outline: none;')) %>%
visLegend(addNodes = lnodes,
useGroups = F,
width = .3)
LEDS_GP_network
LEDS_GP_network <- visNetwork(visnodes,visedges,width = "1200px", height = "600px",
main = "LEDS GP Activities") %>%
visPhysics(enabled = TRUE,
barnesHut = list(avoidOverlap = .2)) %>%
visInteraction(keyboard = TRUE, tooltipDelay = 0) %>%
visOptions(selectedBy = list(variable = "group",
#  selected = "Country",
style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: black;
border: none;
outline: none;')) %>%
visLegend(addNodes = lnodes,
useGroups = F,
width = .21)
LEDS_GP_network
lnodes <- data.frame(id = 1:3,
label = c("Country", "Working Group","Regional Platform"),
shape = c( "dot"), color = c("green","tomato","purple"),
size = c(15,30,45),
stringsAsFactors = F)
LEDS_GP_network <- visNetwork(visnodes,visedges,width = "1200px", height = "600px",
main = "LEDS GP Activities") %>%
visPhysics(enabled = TRUE,
barnesHut = list(avoidOverlap = .2)) %>%
visInteraction(keyboard = TRUE, tooltipDelay = 0) %>%
visOptions(selectedBy = list(variable = "group",
#  selected = "Country",
style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: black;
border: none;
outline: none;')) %>%
visLegend(addNodes = lnodes,
useGroups = F,
width = .21)
LEDS_GP_network
lnodes <- data.frame(id = 1:3,
label = c("Country", "Working Group","Regional Platform"),
shape = c( "dot"), color = c("green","tomato","purple"),
size = c(10,15,20),
stringsAsFactors = F)
LEDS_GP_network <- visNetwork(visnodes,visedges,width = "1200px", height = "600px",
main = "LEDS GP Activities") %>%
visPhysics(enabled = TRUE,
barnesHut = list(avoidOverlap = .2)) %>%
visInteraction(keyboard = TRUE, tooltipDelay = 0) %>%
visOptions(selectedBy = list(variable = "group",
#  selected = "Country",
style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: black;
border: none;
outline: none;')) %>%
visLegend(addNodes = lnodes,
useGroups = F,
width = .21)
LEDS_GP_network
LEDS_GP_network <- visNetwork(visnodes,visedges,width = "1200px", height = "600px",
main = "LEDS GP Activities") %>%
visPhysics(enabled = TRUE,
barnesHut = list(avoidOverlap = .2)) %>%
visInteraction(keyboard = TRUE, tooltipDelay = 0) %>%
visOptions(selectedBy = list(variable = "group",
#  selected = "Country",
style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: black;
border: none;
outline: none;')) %>%
visLegend(addNodes = lnodes,
useGroups = F,
width = .2)
LEDS_GP_network
LEDS_GP_network <- visNetwork(visnodes,visedges,width = "1200px", height = "600px",
main = "LEDS GP Activities") %>%
visPhysics(enabled = TRUE,
barnesHut = list(avoidOverlap = .2)) %>%
visInteraction(keyboard = TRUE, tooltipDelay = 0) %>%
visOptions(selectedBy = list(variable = "group",
#  selected = "Country",
style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: black;
border: none;
outline: none;')) %>%
visLegend(addNodes = lnodes,
useGroups = F,
width = .21)
visSave(LEDS_GP_network, file = "LEDS_GP_network.html", selfcontained = FALSE)
install.packages('shiny')
library(shiny)
shiny::runApp(system.file("shiny", package = "visNetwork"))
library(visNetwork)
library(shiny)
server <- function(input, output) {
output$network <- renderVisNetwork({
edges <- read.csv("edges.csv", stringsAsFactors = F)
nodes <- read.csv("nodes.csv", stringsAsFactors = F)
# set up the nodes data.frame with node attributes
visnodes <- data.frame(id = nodes$id,
Name = nodes$Name,
label = nodes$Name,
font = list(size = 18,
color = "black"),
group = nodes$Type,
size = c(15,30,45)[nodes$TypeID],
shape = "dot",
color = c("green","tomato","purple")[nodes$TypeID],
title = paste0(nodes$Description))
# set up the edges data.frame with edge attributes
names(edges) <- c("from","to","Value","Description","Status")
visedges <- data.frame(from = edges$from, to = edges$to,
title = paste0(edges$Description),
width = 2,
smooth = TRUE)
# remove nodes with no connections
visnodes <- visnodes[nodes$id %in% edges$from | nodes$id %in% edges$to, ]
# nodes for legend
lnodes <- data.frame(id = 1:3,
label = c("Country", "Working Group","Regional Platform"),
shape = c( "dot"), color = c("green","tomato","purple"),
size = c(10,15,20),
stringsAsFactors = F)
# plot the thing
visNetwork(visnodes,visedges,width = "1200px", height = "600px",
main = "LEDS GP Activities") %>%
visPhysics(enabled = TRUE,
barnesHut = list(avoidOverlap = .2)) %>%
visInteraction(keyboard = TRUE, tooltipDelay = 0) %>%
visOptions(highlightNearest = TRUE,
selectedBy = list(variable = "group", style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: black;
border: none;
outline: none;')) %>%
visLegend(addNodes = lnodes,
useGroups = F,
width = .21)
})
output$shiny_return <- renderPrint({
input$current_node_id
})
}
ui <- fluidPage(
visNetworkOutput("network"),
verbatimTextOutput("shiny_return")
)
shinyApp(ui = ui, server = server)
# LEDS GP organization - Network visualization
library(visNetwork)
library(shiny)
server <- function(input, output) {
output$network <- renderVisNetwork({
edges <- read.csv("edges.csv", stringsAsFactors = F)
nodes <- read.csv("nodes.csv", stringsAsFactors = F)
# set up the nodes data.frame with node attributes
visnodes <- data.frame(id = nodes$id,
Name = nodes$Name,
label = nodes$Name,
font = list(size = 18,
color = "black"),
group = nodes$Type,
size = c(15,30,45)[nodes$TypeID],
shape = "dot",
color = c("green","tomato","purple")[nodes$TypeID],
title = paste0(nodes$Description))
# set up the edges data.frame with edge attributes
names(edges) <- c("from","to","Value","Description","Status")
visedges <- data.frame(from = edges$from, to = edges$to,
title = paste0(edges$Description),
width = 2,
smooth = TRUE)
# remove nodes with no connections
visnodes <- visnodes[nodes$id %in% edges$from | nodes$id %in% edges$to, ]
# nodes for legend
lnodes <- data.frame(id = 1:3,
label = c("Country", "Working Group","Regional Platform"),
shape = c( "dot"), color = c("green","tomato","purple"),
size = c(10,15,20),
stringsAsFactors = F)
# plot the thing
visNetwork(visnodes,visedges,width = "1200px", height = "1000px",
main = "LEDS GP Activities") %>%
visPhysics(enabled = TRUE,
barnesHut = list(avoidOverlap = .2)) %>%
visInteraction(keyboard = TRUE, tooltipDelay = 0) %>%
visOptions(highlightNearest = TRUE,
selectedBy = list(variable = "group", style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: black;
border: none;
outline: none;')) %>%
visLegend(addNodes = lnodes,
useGroups = F,
width = .21)
})
output$shiny_return <- renderPrint({
input$current_node_id
})
}
ui <- fluidPage(
visNetworkOutput("network"),
verbatimTextOutput("shiny_return")
)
shinyApp(ui = ui, server = server)
contributors()
contributors()
server <- function(input, output) {
output$network <- renderVisNetwork({
edges <- read.csv("edges.csv", stringsAsFactors = F)
nodes <- read.csv("nodes.csv", stringsAsFactors = F)
# set up the nodes data.frame with node attributes
visnodes <- data.frame(id = nodes$id,
Name = nodes$Name,
label = nodes$Name,
font = list(size = 18,
color = "black"),
group = nodes$Type,
size = c(15,30,45)[nodes$TypeID],
shape = "dot",
color = c("green","tomato","purple")[nodes$TypeID],
title = paste0(nodes$Description))
# set up the edges data.frame with edge attributes
names(edges) <- c("from","to","Value","Description","Status")
visedges <- data.frame(from = edges$from, to = edges$to,
title = paste0(edges$Description),
width = 2,
smooth = TRUE)
# remove nodes with no connections
visnodes <- visnodes[nodes$id %in% edges$from | nodes$id %in% edges$to, ]
# nodes for legend
lnodes <- data.frame(id = 1:3,
label = c("Country", "Working Group","Regional Platform"),
shape = c( "dot"), color = c("green","tomato","purple"),
size = c(10,15,20),
stringsAsFactors = F)
# plot the thing
visNetwork(visnodes,visedges,width = "1200px", height = "1000px") %>%
visPhysics(enabled = TRUE,
barnesHut = list(avoidOverlap = .15)) %>%
visInteraction(keyboard = TRUE, tooltipDelay = 0) %>%
visOptions(highlightNearest = TRUE,
selectedBy = list(variable = "group", style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: black;
border: none;
outline: none;')) %>%
visLegend(addNodes = lnodes,
useGroups = F,
width = .21)
})
output$shiny_return <- renderPrint({
input$current_node_id
})
}
ui <- fluidPage(
titlePanel("LEDS GP Network Visualization"),
visNetworkOutput("network"),
verbatimTextOutput("shiny_return")
)
shinyApp(ui = ui, server = server)
library(visNetwork)
library(shiny)
server <- function(input, output) {
output$network <- renderVisNetwork({
edges <- read.csv("edges.csv", stringsAsFactors = F)
nodes <- read.csv("nodes.csv", stringsAsFactors = F)
# set up the nodes data.frame with node attributes
visnodes <- data.frame(id = nodes$id,
Name = nodes$Name,
label = nodes$Name,
font = list(size = 18,
color = "black"),
group = nodes$Type,
size = c(15,30,45)[nodes$TypeID],
shape = "dot",
color = c("green","tomato","purple")[nodes$TypeID],
title = paste0(nodes$Description))
# set up the edges data.frame with edge attributes
names(edges) <- c("from","to","Value","Description","Status")
visedges <- data.frame(from = edges$from, to = edges$to,
title = paste0(edges$Description),
width = 2,
smooth = TRUE)
# remove nodes with no connections
visnodes <- visnodes[nodes$id %in% edges$from | nodes$id %in% edges$to, ]
# nodes for legend
lnodes <- data.frame(id = 1:3,
label = c("Country", "Working Group","Regional Platform"),
shape = c( "dot"), color = c("green","tomato","purple"),
size = c(10,15,20),
stringsAsFactors = F)
# plot the thing
visNetwork(visnodes,visedges,width = "1200px", height = "1000px") %>%
visPhysics(enabled = TRUE,
barnesHut = list(avoidOverlap = .15)) %>%
visInteraction(keyboard = TRUE, tooltipDelay = 0) %>%
visOptions(highlightNearest = TRUE,
selectedBy = list(variable = "group", style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: black;
border: none;
outline: none;')) %>%
visLegend(addNodes = lnodes,
useGroups = F,
width = .21)
})
output$shiny_return <- renderPrint({
input$current_node_id
})
}
ui <- fluidPage(
titlePanel("LEDS GP Network Visualization"),
visNetworkOutput("network"),
verbatimTextOutput("shiny_return")
)
shinyApp(ui = ui, server = server)
library(visNetwork)
library(shiny)
server <- function(input, output) {
output$network <- renderVisNetwork({
edges <- read.csv("edges.csv", stringsAsFactors = F)
nodes <- read.csv("nodes.csv", stringsAsFactors = F)
# set up the nodes data.frame with node attributes
visnodes <- data.frame(id = nodes$id,
Name = nodes$Name,
label = nodes$Name,
font = list(size = 18,
color = "black"),
group = nodes$Type,
size = c(15,30,45)[nodes$TypeID],
shape = "dot",
color = c("green","tomato","purple")[nodes$TypeID],
title = paste0(nodes$Description))
# set up the edges data.frame with edge attributes
names(edges) <- c("from","to","Value","Description","Status")
visedges <- data.frame(from = edges$from, to = edges$to,
title = paste0(edges$Description),
width = 2,
smooth = TRUE)
# remove nodes with no connections
visnodes <- visnodes[nodes$id %in% edges$from | nodes$id %in% edges$to, ]
# nodes for legend
lnodes <- data.frame(id = 1:3,
label = c("Country", "Working Group","Regional Platform"),
shape = c( "dot"), color = c("green","tomato","purple"),
size = c(10,15,20),
stringsAsFactors = F)
# plot the thing
visNetwork(visnodes,visedges,width = "1200px", height = "1000px") %>%
visPhysics(enabled = TRUE,
barnesHut = list(avoidOverlap = .15)) %>%
visInteraction(keyboard = TRUE, tooltipDelay = 0) %>%
visOptions(highlightNearest = TRUE,
selectedBy = list(variable = "group", style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: black;
border: none;
outline: none;')) %>%
visLegend(addNodes = lnodes,
useGroups = F,
width = .21)
})
output$shiny_return <- renderPrint({
input$current_node_id
})
}
ui <- fluidPage(
titlePanel("LEDS GP Network Visualization"),
visNetworkOutput("network"),
verbatimTextOutput("shiny_return")
)
shinyApp(ui = ui, server = server)
?fluidPage
server <- function(input, output) {
output$network <- renderVisNetwork({
edges <- read.csv("edges.csv", stringsAsFactors = F)
nodes <- read.csv("nodes.csv", stringsAsFactors = F)
# set up the nodes data.frame with node attributes
visnodes <- data.frame(id = nodes$id,
Name = nodes$Name,
label = nodes$Name,
font = list(size = 18,
color = "black"),
group = nodes$Type,
size = c(15,30,45)[nodes$TypeID],
shape = "dot",
color = c("green","tomato","purple")[nodes$TypeID],
title = paste0(nodes$Description))
# set up the edges data.frame with edge attributes
names(edges) <- c("from","to","Value","Description","Status")
visedges <- data.frame(from = edges$from, to = edges$to,
title = paste0(edges$Description),
width = 2,
smooth = TRUE)
# remove nodes with no connections
visnodes <- visnodes[nodes$id %in% edges$from | nodes$id %in% edges$to, ]
# nodes for legend
lnodes <- data.frame(id = 1:3,
label = c("Country", "Working Group","Regional Platform"),
shape = c( "dot"), color = c("green","tomato","purple"),
size = c(10,15,20),
stringsAsFactors = F)
# plot the thing
visNetwork(visnodes,visedges,width = "1200px", height = "1000px") %>%
visPhysics(enabled = TRUE,
barnesHut = list(avoidOverlap = .15)) %>%
visInteraction(keyboard = TRUE, tooltipDelay = 0) %>%
visOptions(highlightNearest = TRUE,
selectedBy = list(variable = "group", style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: black;
border: none;
outline: none;')) %>%
visLegend(addNodes = lnodes,
useGroups = F,
width = .21)
})
output$shiny_return <- renderPrint({
input$current_node_id
})
}
ui <- fluidPage(
titlePanel("LEDS GP Network Visualization"),
visNetworkOutput("network"),
#  verbatimTextOutput("shiny_return")
)
shinyApp(ui = ui, server = server)
print(source('LEDSGP_network_shiny.R')$value)
print(source('LEDSGP_network_shiny.R')$value)
print(source('LEDSGP_network_shiny.R')$value)
print(source('LEDSGP_network_shiny.R')$value)
print(source('LEDSGP_network_shiny.R')$value)
print(source('LEDSGP_network_shiny.R')$value)
print(source('LEDSGP_network_shiny.R')$value)
print(source('LEDSGP_network_shiny.R')$value)
